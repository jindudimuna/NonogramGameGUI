#BlueJ class context
comment0.target=Nonogram
comment0.text=\r\n\ A\ Nonogram\ puzzle.\r\n\ \r\n\ @author\ Dr\ Mark\ C.\ Sinclair\r\n\ @version\ September\ 2022\r\n
comment1.params=scnr
comment1.target=Nonogram(java.util.Scanner)
comment1.text=\r\n\ Constructor\ from\ a\ scanner\ (.non\ file\ format)\r\n\ see\ https\://github.com/mikix/nonogram-db/blob/master/FORMAT.md\r\n\ \r\n\ @param\ scnr\ the\ scanner\r\n
comment10.params=row
comment10.target=java.lang.String\ getRowSequence(int)
comment10.text=\r\n\ Retrieve\ the\ cell\ states\ for\ a\ given\ row\ as\ a\ sequence\ string\r\n\ \r\n\ @param\ row\ the\ desired\ row\r\n\ @return\ the\ row\ cell\ states\r\n
comment11.params=col
comment11.target=java.lang.String\ getColSequence(int)
comment11.text=\r\n\ Retrieve\ the\ cell\ states\ for\ a\ given\ column\ as\ a\ sequence\ string\r\n\ \r\n\ @param\ col\ the\ desired\ column\r\n\ @return\ the\ column\ cell\ states\r\n
comment12.params=s
comment12.target=void\ setStatesByString(java.lang.String)
comment12.text=\r\n\ Set\ the\ cell\ states\ of\ an\ entire\ nonogram\ from\ a\ single\ cell\ state\ string\ (e.g.\ the\ goal\ in\ a\ .non\ file)\r\n\ \r\n\ @param\ s\ the\ goal\ string\r\n
comment13.params=row
comment13.target=boolean\ isRowValid(int)
comment13.text=\r\n\ Is\ a\ given\ row\ of\ cells\ valid\ against\ its\ constraint?\r\n\ \r\n\ @param\ row\ the\ desired\ row\r\n\ @return\ true\ if\ the\ row\ is\ valid,\ otherwise\ false\r\n
comment14.params=col
comment14.target=boolean\ isColValid(int)
comment14.text=\r\n\ Is\ a\ given\ column\ of\ cells\ valid\ against\ its\ constraint?\r\n\ \r\n\ @param\ col\ the\ desired\ column\r\n\ @return\ true\ if\ the\ column\ is\ valid,\ otherwise\ false\r\n
comment15.params=row
comment15.target=boolean\ isRowSolved(int)
comment15.text=\r\n\ Is\ a\ given\ row\ of\ cells\ solved?\ (Note\ that\ a\ row\ may\ be\ solved,\ but\ still\ incorrect\ depending\ on\ other\ columns.)\r\n\ \r\n\ @param\ row\ the\ desired\ row\r\n\ @return\ true\ if\ the\ row\ is\ solved,\ otherwise\ false\r\n
comment16.params=col
comment16.target=boolean\ isColSolved(int)
comment16.text=\r\n\ Is\ a\ given\ column\ of\ cells\ solved?\ (Note\ that\ a\ column\ may\ be\ solved,\ but\ still\ incorrect\ depending\ on\ other\ rows.)\r\n\ \r\n\ @param\ col\ the\ desired\ column\r\n\ @return\ true\ if\ the\ column\ is\ solved,\ otherwise\ false\r\n
comment17.params=
comment17.target=boolean\ isSolved()
comment17.text=\r\n\ Are\ all\ rows\ and\ columns,\ and\ therefore\ the\ whole\ puzzle,\ solved?\r\n\ \r\n\ @return\ true\ if\ all\ rows\ and\ coplumns\ are\ solved,\ otherwise\ false\r\n
comment18.params=
comment18.target=java.lang.String\ toStringAsNonFile()
comment18.text=\r\n\ String\ representation\ of\ the\ puzzle\ in\ .non\ file\ form\r\n\ \r\n\ @return\ the\ string\ representation\r\n
comment19.params=s
comment19.target=void\ trace(java.lang.String)
comment19.text=\r\n\ A\ trace\ method\ for\ debugging\ (active\ when\ traceOn\ is\ true)\r\n\ \r\n\ @param\ s\ the\ string\ to\ output\r\n
comment2.params=
comment2.target=int\ getNumRows()
comment2.text=\r\n\ Retrieve\ the\ number\ of\ rows\r\n\ \r\n\ @return\ the\ number\ of\ rows\r\n
comment3.params=
comment3.target=int\ getNumCols()
comment3.text=\r\n\ Retrieve\ the\ number\ of\ columns\r\n\ \r\n\ @return\ the\ number\ of\ columns\r\n
comment4.params=row\ col
comment4.target=int\ getState(int,\ int)
comment4.text=\r\n\ Retrieve\ the\ state\ of\ an\ individual\ cell\r\n\ \r\n\ @param\ row\ the\ cell\ row\r\n\ @param\ col\ the\ cell\ column\r\n\ @return\ the\ cell\ state\r\n
comment5.params=row\ col\ state
comment5.target=void\ setState(int,\ int,\ int)
comment5.text=\r\n\ Set\ the\ state\ of\ an\ individual\ cell,\ notifying\ observers\r\n\ \r\n\ @param\ row\ the\ cell\ row\r\n\ @param\ col\ the\ cell\ column\r\n\ @param\ state\ the\ new\ state\ \r\n
comment6.params=move
comment6.target=void\ setState(Assign)
comment6.text=\r\n\ Set\ the\ state\ of\ an\ individual\ cell\ using\ the\ data\ in\ an\ Assign\ object\r\n\ \r\n\ @param\ move\ the\ Assign\r\n
comment7.params=
comment7.target=void\ clear()
comment7.text=\r\n\ Clear\ all\ the\ cells\ in\ the\ puzzle\ (set\ to\ UNKNOWN)\r\n
comment8.params=row
comment8.target=int[]\ getRowNums(int)
comment8.text=\r\n\ Retrieve\ the\ pattern\ of\ contiguous\ full\ cells\ for\ a\ given\ row\ as\ an\ integer\ array\r\n\ \r\n\ @param\ row\ the\ desired\ row\r\n\ @return\ the\ pattern\ of\ contiguous\ full\ cells\ in\ the\ row\ constraint\r\n
comment9.params=col
comment9.target=int[]\ getColNums(int)
comment9.text=\r\n\ Retrieve\ the\ pattern\ of\ contiguous\ full\ cells\ for\ a\ given\ column\ as\ an\ integer\ array\r\n\ \r\n\ @param\ col\ the\ desired\ column\r\n\ @return\ the\ pattern\ of\ contiguous\ full\ cells\ in\ the\ column\ constraint\r\n
numComments=20
